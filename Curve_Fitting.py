# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RHy0mdxNrhCQczv_oTRNT2zOCXZgvvQN
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

var = pd.read_excel("/content/edge-data_1C4A6507.JPG_v8.1.xlsx")
print(var)

x = list(var['x'])
y1 = list(var['y1'])
y2 = list(var['y2'])

plt.scatter(x, y1)
plt.scatter(x, y2)
plt.show()

"""not all the data points can be used to fit our circle!!!

We need to manually select data point that seems to fit out circle!
"""

new_var = var.iloc[58:120, 0:4]
new_var

x = list(new_var['x'])
y1 = list(new_var['y1'])
y2 = list(new_var['y2'])
y3 = list(new_var['one'])

a_float = []
for num in y3:
  a_float.append(float(num))

one = str(a_float)

plt.scatter(x, y1)
plt.scatter(x, y2)
plt.show()

result = new_var.dtypes
result

ones = np.ones_like(x)
ones

x = np.array(x)

y1 = np.array(y1)

A = np.c_[-2*x,-2*y1,ones]
A

A_Trans = A.T
A_Trans

x0,y0,b=np.linalg.solve(A_Trans@A,A_Trans@(-(x**2)-(y1**2)))
x0,y0

r = np.sqrt(x0**2+y0**2-b)
r

from matplotlib import pyplot as plt, patches
plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig = plt.figure()
ax = fig.add_subplot()
circle1 = patches.Circle((x0, y0), radius=r, color='green')
ax.add_patch(circle1)
ax.axis('equal')
plt.scatter(x, y1)
plt.scatter(x, y2)
plt.show()

import matplotlib.pyplot as plt 

figure, axes = plt.subplots() 
cc = plt.Circle(( x0 , y0 ), r ) 

axes.set_aspect( 1 ) 
axes.add_artist( cc ) 
plt.title( 'Colored Circle' ) 
plt.show()

import matplotlib.pyplot as plt 
 
plt.scatter( 0 , 0 , s=10000 ,  facecolors='none', edgecolors='blue' ) 
 
plt.xlim( -0.5 , 0.5 ) 
plt.ylim( -0.5 , 0.5 ) 
 
plt.show()

import matplotlib.pyplot as plt 
 
figure, axes = plt.subplots() 
cc = plt.Circle(( 0.5 , 0.5 ), 0.4 ) 
 
axes.set_aspect( 1 ) 
axes.add_artist( cc )  
plt.show()

from matplotlib import pyplot as plt, patches
plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig = plt.figure()
ax = fig.add_subplot()
circle1 = patches.Circle((x0, y0), radius=r, color='red')
ax.add_patch(circle1)
ax.axis('equal')
plt.scatter(x, y1)
plt.scatter(x, y2)
plt.show()

import matplotlib.pyplot as plt

circle1 = plt.Circle((0, 0), 0.2, color='r')
circle2 = plt.Circle((0.5, 0.5), 0.2, color='blue')
circle3 = plt.Circle((1, 1), 0.2, color='g', clip_on=False)

fig, ax = plt.subplots() # note we must use plt.subplots, not plt.subplot
# (or if you have an existing figure)
# fig = plt.gcf()
# ax = fig.gca()

ax.add_patch(circle1)
ax.add_patch(circle2)
ax.add_patch(circle3)

import matplotlib.pyplot as plt
from numpy import sin, cos, pi, linspace

plt.plot(0,0, color = 'red', marker = 'o')

r = 1.5
angles = linspace(0 * pi, 2 * pi, 100) 
print(angles)
xs = cos(angles)
ys = sin(angles)


plt.plot(xs, ys, color = 'green')
plt.xlim(-r, r)
plt.ylim(-r, r)
plt.gca().set_aspect('equal')

str(y1)
y1

data = [(1.878980891719745, 1.5923566878980893),
(1.9108280254777068, 1.624203821656051),
(1.9426751592356686, 1.5923566878980893),
(1.9745222929936304, 1.5923566878980893),
(2.006369426751592, 1.624203821656051)
]

data=np.array(data)

from ellipse import LsqEllipse
import numpy as np
import matplotlib.pyplot as plt
import statistics
from statistics import mean 

from matplotlib.patches import Ellipse

lsqe = LsqEllipse()
lsqe.fit(data)
center, width, height, phi = lsqe.as_parameters()

plt.close('all')
fig = plt.figure(figsize=(6,6))
ax = fig.add_subplot(111)
ax.axis('equal')
ax.plot(data[:,0], data[:,1], 'ro', label='test data', zorder=1)

ellipse = Ellipse(xy=center, width=2*width, height=2*height, angle=np.rad2deg(phi),
              edgecolor='b', fc='None', lw=2, label='Fit', zorder = 2)
ax.add_patch(ellipse)
print('center of fitted circle =',center, '\n','radius =', mean([width,height]),'+/- stddev=',statistics.stdev([width,height]))
plt.legend()
plt.show()

data = [(2.2176383052987667, 4.218574252410221),
(3.3041214516913033, 5.223500807396272),
(4.280815855023374, 6.461487709813785),
(4.946375258539319, 7.606952538212697),
(5.382428804463699, 9.045717060494576),
(5.752578028217334, 10.613667377465823),
(5.547729017414035, 11.92662513852466),
(5.260208374620305, 13.57722448066025),
(4.642126672822957, 14.88238955729078),
(3.820310290976751, 16.10605425390148),
(2.8099420132544024, 17.225880123445773),
(1.5731539516426183, 18.17052077121059),
(0.31752822350872545, 18.75261434891438),
(-1.2408437559671106, 19.119355580780265),
(-2.680901948575409, 19.15018791257732),
(-4.190406775175328, 19.001321726517297),
(-5.533990404926917, 18.64857428377178),
(-6.903383826792998, 17.730112542165955),
(-8.082883753215347, 16.928080323602334),
(-9.138397388219254, 15.84088004983959),
(-9.92610373064812, 14.380575762984085),
(-10.358670204629814, 13.018017342781242),
(-10.600053524240247, 11.387283417089911),
(-10.463673966507077, 10.107554951600699),
(-10.179820255235496, 8.429558128401448),
(-9.572153386953028, 7.1976672709797676),
(-8.641475289758178, 5.8312286526738175),
(-7.665976739804268, 4.782663065707469),
(-6.493033077746997, 3.8549965442534684),
(-5.092340806635571, 3.384419909199452),
(-3.6530364510489073, 2.992272643733981),
(-2.1522365767310796, 3.020780664301393),
(-0.6855406924835704, 3.0767643753777447),
(0.7848958776292426, 3.6196842530995332),
(2.0614188482646947, 4.32795711960546),
(3.2705467984691508, 5.295836809444288),
(4.359297538484424, 6.378324784240816),
(4.981264502955681, 7.823851404553242)]

#  == METHOD 2 ==
from scipy      import optimize

method_2 = "leastsq"

def calc_R(xc, yc):
    """ calculate the distance of each 2D points from the center (xc, yc) """
    return sqrt((x-xc)**2 + (y-yc)**2)

def f_2(c):
    """ calculate the algebraic distance between the data points and the mean circle centered at c=(xc, yc) """
    Ri = calc_R(*c)
    return Ri - Ri.mean()

center_estimate = x_m, y_m
center_2, ier = optimize.leastsq(f_2, center_estimate)

xc_2, yc_2 = center_2
Ri_2       = calc_R(*center_2)
R_2        = Ri_2.mean()
residu_2   = sum((Ri_2 - R_2)**2)